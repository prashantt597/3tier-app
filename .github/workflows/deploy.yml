name: Build, Test, and Deploy 3-Tier App to AWS EKS

on:
  push:
    branches:
      - mai
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  DOCKERHUB_REPOSITORY: your-org/3tier-app # Replace with your Docker Hub repo
  EKS_CLUSTER_NAME: three-tier-eks-cluster
  HELM_RELEASE_NAME: three-tier-app
  SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }} # e.g., http://sonarqube.your-domain.com
  SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install frontend dependencies and run tests
      - name: Frontend Unit Tests
        run: |
          cd client
          npm ci
          npm test

      # Install backend dependencies and run tests
      - name: Backend Unit Tests
        run: |
          cd api
          npm ci
          npm test

      # SonarQube analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
        with:
          args: >
            -Dsonar.projectKey=3-tier-app
            -Dsonar.organization=your-org
            -Dsonar.sources=client/src,api
            -Dsonar.tests=client/src,api/__tests__
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push frontend Docker image
      - name: Build and Push Frontend Docker Image
        run: |
          cd client
          docker build -t ${{ env.DOCKERHUB_REPOSITORY }}-frontend:${{ github.sha }} .
          docker push ${{ env.DOCKERHUB_REPOSITORY }}-frontend:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_REPOSITORY }}-frontend:${{ github.sha }} ${{ env.DOCKERHUB_REPOSITORY }}-frontend:latest
          docker push ${{ env.DOCKERHUB_REPOSITORY }}-frontend:latest

      # Build and push backend Docker image
      - name: Build and Push Backend Docker Image
        run: |
          cd api
          docker build -t ${{ env.DOCKERHUB_REPOSITORY }}-backend:${{ github.sha }} .
          docker push ${{ env.DOCKERHUB_REPOSITORY }}-backend:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_REPOSITORY }}-backend:${{ github.sha }} ${{ env.DOCKERHUB_REPOSITORY }}-backend:latest
          docker push ${{ env.DOCKERHUB_REPOSITORY }}-backend:latest

      # Scan images with Trivy
      - name: Scan Frontend Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKERHUB_REPOSITORY }}-frontend:${{ github.sha }}
          format: table
          exit-code: 1 # Fail on critical/high vulnerabilities
          severity: CRITICAL,HIGH

      - name: Scan Backend Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKERHUB_REPOSITORY }}-backend:${{ github.sha }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-test-scan
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Initialize Terraform
      - name: Terraform Init
        run: |
          cd infra
          terraform init

      # Apply Terraform
      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve

      # Output ALB DNS
      - name: Output ALB DNS
        run: |
          cd infra
          terraform output alb_dns_name

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      # Deploy with Helm
      - name: Deploy to EKS with Helm
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} helm/3-tier-app \
            --set frontend.image=${{ env.DOCKERHUB_REPOSITORY }}-frontend:${{ github.sha }} \
            --set backend.image=${{ env.DOCKERHUB_REPOSITORY }}-backend:${{ github.sha }} \
            --namespace default

      # Get ALB URL
      - name: Get ALB URL
        run: |
          ALB_URL=$(kubectl get ingress -n default -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          echo "Application is accessible at: http://$ALB_URL"
