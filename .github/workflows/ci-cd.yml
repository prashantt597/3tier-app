name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd client
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list  # Log installed dependencies

      - name: Check for dependency vulnerabilities
        run: |
          cd client
          pip install pip-audit
          pip-audit -r requirements.txt || true  # Log vulnerabilities but don't fail pipeline

      - name: Run unit tests with coverage
        run: |
          cd client
          python -m pytest -vv --cov=app --cov-report=xml tests/ || echo "Test errors: $(cat pytest.log)"  # Capture detailed output

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd client
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/git_action_aws:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/git_action_aws:latest

      - name: Verify Docker image availability
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/git_action_aws:latest || { echo "Failed to pull image"; exit 1; }

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ secrets.DOCKERHUB_USERNAME }}/git_action_aws:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          skip-version-check: true

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: client

      - name: Verify Docker image health
        run: |
          docker run -d -p 8000:8000 --name test-container ${{ secrets.DOCKERHUB_USERNAME }}/git_action_aws:latest
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container
          docker rm test-container

      - name: Package Helm chart
        run: |
          helm package helm/fastapi-app
          mv fastapi-app-*.tgz fastapi-app.tgz

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          aws eks --region ap-south-1 update-kubeconfig --name git-action-eks

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic app-secrets --from-literal=secret-key=${{ secrets.SECRET_KEY }} -n default --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS with Helm
        run: |
          helm upgrade --install fastapi-app ./fastapi-app.tgz --namespace default --set image.tag=latest

      - name: Get ALB URL
        id: alb_url
        run: |
          for i in {1..5}; do
            ALB_URL=$(kubectl get ingress -n default -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' --request-timeout=60s || true)
            if [ -n "$ALB_URL" ]; then
              echo "ALB_URL=$ALB_URL" >> $GITHUB_ENV
              echo "ALB URL: $ALB_URL"
              exit 0
            fi
            echo "Retrying ALB URL retrieval ($i/5)..."
            sleep 30
          done
          echo "Failed to retrieve ALB URL after 5 attempts"
          exit 1

      - name: Output ALB URL
        run: |
          echo "Application is accessible at: ${{ env.ALB_URL }}"