name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  CLUSTER_NAME: 3tier-eks
  TERRAFORM_DIR: infra
  HELM_CHART_DIR: helm/fastapi-app
  DOCKER_IMAGE: prashantt597/3tier-app
  DOCKER_TAG: latest

jobs:

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Tests
        run: pytest --cov=app tests/

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r client/requirements.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: client
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: prashantt597_git-act-proj
          SONAR_ORGANIZATION: prashantt597

  trivy-scan:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: prashantt597/3tier-app:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: 'os,library'

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-test, trivy-scan]
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        run: |
          docker build -t $DOCKER_IMAGE:$DOCKER_TAG client
          docker push $DOCKER_IMAGE:$DOCKER_TAG

  terraform-apply:
    name: Provision EKS with Terraform
    runs-on: ubuntu-latest
    needs: docker
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    name: Deploy App via Helm
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - uses: actions/checkout@v3

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install fastapi-app $HELM_CHART_DIR \
            --set image.repository=$DOCKER_IMAGE \
            --set image.tag=$DOCKER_TAG

  terraform-destroy:
    name: Destroy Infra (Manual)
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
